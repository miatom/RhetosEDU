//Module BookStore;
//Entity BookStore.Book;
//ShortString BookStore.Book.Code; 
//Autocode BookStore.Book.Code;
//ShortString BookStore.Book.Title;
//Integer  BookStore.Book.NumberOfPages;
//Integer BookStore.Book.NumberOfPages;
//ItemFilter BookStore.Book.CommonMisspelling 'book => book.Title.Contains("curiousity")';
//InvalidData BookStore.Book.CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
//Reference BookStore.Book.Author BookStore.Person;

//Entity BookStore.Person;
//ShortString BookStore.Person.Name; 

//Entity BookStore.Comment; 
//Reference BookStore.Comment.Book BookStore.Book; 
//Detail  BookStore.Comment.Book;
//LongString BookStore.Comment.Text;

//Entity BookStore.ChildrenBook;
//Extends BookStore.ChildrenBook BookStore.Book;
//Integer BookStore.ChildrenBook.AgeFrom;
//Integer BookStore.ChildrenBook.AgeTo;
//IntegerRange BookStore.ChildrenBook.AgeFrom AgeTo; // A simple validation.

//Entity BookStore.ForeignBook;
//Extends BookStore.ForeignBook BookStore.Book;
//ShortString BookStore.ForeignBook.OriginalLanguage;
//Reference BookStore.ForeignBook.Translator BookStore.Person;

//Entity BookStore.Topic;
//ShortString BookStore.Topic.Name;

//Entity BookStore.BookTopic;
//Reference BookStore.BookTopic.Book BookStore.Book;
//Detail BookStore.BookTopic.Book;
//Reference BookStore.BookTopic.Topic BookStore.Topic;
//Required BookStore.BookTopic.Topic;
//UniqueMultiple BookStore.BookTopic.'Book Topic';

Module Bookstore
{
    AutodetectSqlDependencies;
    Entity Book
    {
        ShortString Code { AutoCode; }
        ShortString Title { Required; }
        Integer NumberOfPages { MinValue 10; MaxValue 2000;}
        DateTime CreatedAt { CreationTime;  DenyUserEdit; }
        DateTime LastModification { LastModificationTime; }
        Reference Author Bookstore.Person;

        RowPermissions 
        {
            AllowRead Everyone 'context => 
            {
                return item => true;
            }';

            AllowWrite AsignedToBook 'context => 
            {
                var myBookId = context.Repository.Bookstore.Employee.Query()
                .Where(e => e.Name == context.UserInfo.UserName)
                .Select(e => e.Book.ID).SingleOrDefault();
                return item => item.ID == myBookId;

            }';
        }

        ItemFilter ContainsLetter 'item => item.Author.Name.StartsWith("P") && item.Extension_ForeignBook.ID != null';
        ItemFilter BooksWithMoreThan100Pages'item => item.NumberOfPages >= 100';
        ItemFilter ContainsLockMark 'item => item.Title.Contains("Croatian")';

        //ComposableFilterBy CommonMisspelling2 '(query, repository, parameter) => {
            //return query.Where(book.Title.Contains(parameter.KeyWord));
        //}';

        ComposableFilterBy BooksWithMoreThanPages '(query, repository, parameter) => 
        {
            return query.Where(item => item.NumberOfPages >= parameter.NumberOfPages);
        }';

        FilterBy ComplexSearch '(repository, parameter) => 
        {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.NumberOfPages);
            if(parameter.IsForeignBook == true)
            {
                query = query.Where(item => item.Extension_ForeignBook.ID != null && item.Author.Name != null);
            }
            return query.ToSimple().ToArray();;
        }';

        
        Lock ContainsLockMark 'Name contains lock mark.';

        Logging 
        {
            Log Bookstore.Book.Title;
            Log Bookstore.Book.NumberOfPages;
        }

        SaveMethod 
        {
            Initialization SaveModificationDate
            '
                foreach(var item in insertedNew.Concat(updatedNew))
                   item.LastModification = DateTime.Now;
            ';
        }

        
    }

    Parameter BooksWithMoreThanPages 
    {
        Integer NumberOfPages;
    }

    Parameter ComplexSearch
    {
        Integer NumberOfPages;
        Bool IsForeignBook;
    }

    Parameter CommonMisspelling2 
    {
        ShortString KeyWord;
    }

    Entity Person
    {
        ShortString Name;
        Deactivatable;
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text { DefaultValue 'item => "comment"'; }
        DateTime ModifiedAt { ModificationTimeOf Bookstore.Comment.Text; }

         RowPermissions 
        {

            AllowRead ToEveryone 'context => 
            {
                return item => true;
            }';

            AllowWrite AsignedToBookComments 'context => 
            {
                var myBookId = context.Repository.Bookstore.Employee.Query()
                .Where(e => e.Name == context.UserInfo.UserName)
                .Select(e => e.Book.ID).SingleOrDefault();
                return  item => item.BookID == myBookId;

            }';
        }

        Logging 
        {
            AllProperties;
        }
    }
    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;

       
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }
    }    

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Browse TitlesAndAuthors Bookstore.Book
    {
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
    }

    SqlQueryable BookInfo 
    "
        SELECT
            b.ID,
            NumberOfComments = COUNT(c.ID)
        FROM
            Bookstore.Book b
            LEFT JOIN Bookstore.Comment c ON c.BookID = b.ID
        GROUP BY
            b.ID
    "
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

    SqlQueryable BookInfoTopics
    "
        SELECT b.ID, b.Title, NumberOfTopics = COUNT(bt.TopicID)  
        FROM BookStore.Book b
        LEFT JOIN BookStore.BookTopic bt ON b.ID = bt.BookID
        
        GROUP BY b.ID, b.Title
    "
    {
        Extends Bookstore.Book;
        Integer NumberOfTopics;

        AutodetectSqlDependencies;
    }

    Browse BooksWithTopics Bookstore.Book
    {
        Take Title;
        Take NumberOfPages;
        Take CreatedAt;
        Take 'Author.Name';
        Take NumberOfTopics 'Extension_BookInfoTopics.NumberOfTopics';
    }

    SqlView BooksWithNoAuthors
    "
        select b.Title, b.Code, b.NumberOfPages
        from BookStore.Book b
        where b.AuthorID is null
    "
    {}

    SqlQueryable NoAuthorBooks
    "
        select top(3) *
        from Bookstore.BooksWithNoAuthors bna    
    "
    {

    }
   
}

